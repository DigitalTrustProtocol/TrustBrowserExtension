Trust network
Seed: bestseedever

John D. Greenwood
jdg
19ZWEJYMq9jnEuvvCP7UMBD196h1nb8UR7
https://images.pexels.com/photos/53487/james-stewart-man-person-actor-53487.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=64
Trust -> Sofie
Trust -> Bill

Sofie Hansen
14aAU7werm5MYXoFUW1G7b8oHrHVhNPQ65
sh
https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=64
Trust -> Jack

Bill Benson
bb
1FBLt4JCvS5oxKwWo2dwtijcengfPXtzSX
https://images.pexels.com/photos/842980/pexels-photo-842980.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=64

Trust -> Hanna
Trust -> Zoe


Hanna Lancaster
hl
https://images.pexels.com/photos/1181686/pexels-photo-1181686.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=64
1CfsmiZckqHwnU4EyrhzpnGDuj9hXUGsww
Trust -> Zoe
Trust -> Twitter

Zoe Humminbird
zh
https://images.pexels.com/photos/1124724/pexels-photo-1124724.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=64
1382m8FXwwE1NF1xF64zq2YDJgMhLWp5YB
Rate -> Twitter

Jack Black
jb
https://images.pexels.com/photos/1073097/pexels-photo-1073097.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=64
1JtaQ9AymgJf2yafu5CVod4ryYoyfATr3C
Rate -> Twitter



    drawOnIcon(icon: favIcon) : Promise<string> {
        //var favicon = document.getElementById('favicon');
        if(!icon || !icon.href) return null;

        var faviconSize = 60;
      
        var canvas = document.createElement('canvas');
        canvas.width = faviconSize;
        canvas.height = faviconSize;
      
        var context = canvas.getContext('2d');
        // var img = document.createElement('img');
        // img.src = icon.href;
      
        let data = null;

        let deferred = new Promise<string>(resolve => {
            const img = new Image();
            img.onload = () => { 
                context.drawImage(img, 0, 0, faviconSize, faviconSize);
      
                // Draw Notification Circle
                context.beginPath();
                context.arc( canvas.width - faviconSize / 3 , faviconSize / 3, faviconSize / 3, 0, 2*Math.PI);
                context.fillStyle = '#FF0000';
                context.fill();
          
                // Replace favicon
                data = canvas.toDataURL('image/png');

                resolve(data);
            };

            img.onerror = () => resolve(null);
            img.src = icon.href;
        });

        // img.onload = () => {
        //     // Draw Original Favicon as Background
            
        //   };

          return deferred;
      }







manifest.json

    {
      "matches": [ "*://*.twitter.com/*" ],
      "css": [
        "css/content.css"
      ],
      "js": [
        "js/common.js",
        "twitterapp.js"
      ],
      "run_at": "document_end"
    },
    {
      "matches": [ "*://*/settings/profile" ],
      "css": [
        "css/content.css"
      ],
      "js": [
        "js/common.js",
        "mastodonProfile.js"
      ],
      "run_at": "document_end"
    },
    {
      "matches": [ "*://*/web/getting-started"],
      "exclude_globs": ["*settings/profile*"],
      "css": [
        "css/content.css"
      ],
      "js": [
        "js/common.js",
        "mastodon.js"
      ],
      "run_at": "document_end"
    },

TODO:
Refresh data on Identity change
DO something about the icons!


     getUserInfoClick() : void {
        this.getUserInfo(true, (error, status, response) => {
            if (!error && status == 200) {
            //let user_info = JSON.parse(response, null, 2);
            console.log(response);
            
            } else {
                console.log("Error message: "+error);
                console.log("Status code: "+status)
            }
        });
    }
    // googleLogin() {
    //     // chrome.identity.getAuthToken({interactive: true}, function(token) {
    //     //     console.log(token);
    //     //         chrome.identity.getProfileUserInfo(function (info) {
    //     //             console.log(info);
    //     //         });
    //     //     });
    // }


  // @corecode_begin getProtectedData
  xhrWithAuth(method, url, interactive, callback) {
    var access_token;

    var retry = true;

    getToken();

    function getToken() {
      chrome.identity.getAuthToken({ interactive: interactive }, function(token) {
        if (chrome.runtime.lastError) {
          callback(chrome.runtime.lastError);
          return;
        }

        console.log("Token:"+token);
        access_token = token;
        requestStart();
      });
    }

    function requestStart() {
      var xhr = new XMLHttpRequest();
      xhr.open(method, url);
      xhr.setRequestHeader('Authorization', 'Bearer ' + access_token);
      xhr.onload = requestComplete;
      xhr.send();
    }

    function requestComplete() {
      if (this.status == 401 && retry) {
        retry = false;
        chrome.identity.removeCachedAuthToken({ token: access_token },
                                              getToken);
      } else {
        callback(null, this.status, this.response);
      }
    }
  }

  getUserInfo(interactive, onUserInfoFetched) {
    this.xhrWithAuth('GET',
                'https://www.googleapis.com/oauth2/v1/userinfo',
                interactive,
                onUserInfoFetched);


    // this.xhrWithAuth('GET',
    //             'https://localhost:44359/api/Test',
    //             interactive,
    //             (msg, status, response) => {
    //                 console.log("msg:"+msg);
    //                 console.log("status:"+status);
    //                 console.log("response:"+response);
    //             });
  }


  
  // Code updating the user interface, when the user information has been
  // fetched or displaying the error.
//   onUserInfoFetched(error, status, response) {
//     if (!error && status == 200) {
//       //changeState(STATE_AUTHTOKEN_ACQUIRED);
//       sampleSupport.log(response);
//       var user_info = JSON.parse(response);
//       populateUserInfo(user_info);
//     } else {
//       changeState(STATE_START);
//     }
//   }



  changeState(newState: number) : void {
        this.state = newState;
        switch (this.state) {
          case this.STATE_START:
            this.signin_button = true;
            this.xhr_button = false;
            this.revoke_button = false;
            break;
          case this.STATE_ACQUIRING_AUTHTOKEN:
            console.log('Acquiring token...');
            this.signin_button = false;
            this.xhr_button = false;
            this.revoke_button = false;
            break;
          case this.STATE_AUTHTOKEN_ACQUIRED:
            this.signin_button = false;
            this.xhr_button = true;
            this.revoke_button = true;

            break;
        }
      }

      interactiveSignIn() {
        this.changeState(this.STATE_ACQUIRING_AUTHTOKEN);
    
        // @corecode_begin getAuthToken
        // @description This is the normal flow for authentication/authorization
        // on Google properties. You need to add the oauth2 client_id and scopes
        // to the app manifest. The interactive param indicates if a new window
        // will be opened when the user is not yet authenticated or not.
        // @see http://developer.chrome.com/apps/app_identity.html
        // @see http://developer.chrome.com/apps/identity.html#method-getAuthToken
        chrome.identity.getAuthToken({ 'interactive': true }, function(token) {
          if (chrome.runtime.lastError) {
            console.log(chrome.runtime.lastError);
            this.changeState(this.STATE_START);
          } else {
            console.log('Token acquired:'+token+
              '. See chrome://identity-internals for details.');
            this.changeState(this.STATE_AUTHTOKEN_ACQUIRED);
          }
        });
        // @corecode_end getAuthToken
      }

      revokeToken() {
        //let user_info_div.innerHTML="";
        chrome.identity.getAuthToken({ 'interactive': false },
          function(current_token) {
            if (!chrome.runtime.lastError) {
    
              // @corecode_begin removeAndRevokeAuthToken
              // @corecode_begin removeCachedAuthToken
              // Remove the local cached token
              chrome.identity.removeCachedAuthToken({ token: current_token },
                function() {});
              // @corecode_end removeCachedAuthToken
    
              // Make a request to revoke token in the server
              var xhr = new XMLHttpRequest();
              xhr.open('GET', 'https://accounts.google.com/o/oauth2/revoke?token=' +
                       current_token);
              xhr.send();
              // @corecode_end removeAndRevokeAuthToken
    
              // Update the user interface accordingly
              this.changeState(this.STATE_START);
              console.log('Token revoked and removed from cache. '+
                'Check chrome://identity-internals to confirm.');
            }
        });
      }


